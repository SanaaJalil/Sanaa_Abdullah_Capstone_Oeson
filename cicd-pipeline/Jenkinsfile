pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub-creds') 
        DOCKERHUB_USER = 'sanaa21'              
        IMAGE_NAME = 'flask-capstone-app'       
        KUBECONFIG_CREDENTIALS = credentials('kubeconfig') 
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/SanaaJalil/oeson-capstone-full-project.git'
            }
        }

        stage('Terraform Init and Apply') {
            steps {
                dir('infra/terraform') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        
        stage('Ansible Install Jenkins, Docker, K8s, Helm') {
            steps {
                dir('ansible') {
                    sh 'ansible-playbook -i inventory.ini playbooks/install-jenkins.yml'
                    sh 'ansible-playbook -i inventory.ini playbooks/install-docker.yml'
                    sh 'ansible-playbook -i inventory.ini playbooks/install-k8s.yml'
                    sh 'ansible-playbook -i inventory.ini playbooks/install-monitoring.yml'
                    sh 'ansible-playbook -i inventory.ini playbooks/configure-pipeline.yml'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('app') {
                    sh 'pip3 install -r requirements.txt'
                }
            }
        }

        stage('Test') {
            steps {
                sh 'pytest tests/'  
            }
        }

        stage('Debug: Show Folders') {
            steps {
                sh 'ls -la'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${DOCKERHUB_USER}/${IMAGE_NAME}:${BUILD_NUMBER}", "app")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                        dockerImage.push()
                        sh """
                        docker tag ${DOCKERHUB_USER}/${IMAGE_NAME}:${BUILD_NUMBER} ${DOCKERHUB_USER}/${IMAGE_NAME}:latest
                        docker push ${DOCKERHUB_USER}/${IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    sh '''
                    export KUBECONFIG=$KUBECONFIG_FILE
                    kubectl apply -f k8s/namespace.yaml
                    kubectl apply -f k8s/deployment.yaml
                    kubectl apply -f k8s/service.yaml
                    '''
                }
            }
        }
    }
}
